{"ast":null,"code":"import { create } from 'zustand';\n// 从localStorage加载初始状态\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('auth-storage');\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return {};\n  }\n};\n\n// 保存状态到localStorage\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify({\n      user: state.user,\n      token: state.token,\n      isAuthenticated: state.isAuthenticated\n    });\n    localStorage.setItem('auth-storage', serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\nconst initialState = loadState();\nexport const useAuthStore = create((set, get) => ({\n  user: initialState.user || null,\n  token: initialState.token || null,\n  isAuthenticated: initialState.isAuthenticated || false,\n  isLoading: false,\n  login: (user, token) => {\n    const newState = {\n      user,\n      token,\n      isAuthenticated: true,\n      isLoading: false\n    };\n    set(newState);\n    saveState(get());\n  },\n  logout: () => {\n    const newState = {\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false\n    };\n    set(newState);\n    saveState(get());\n  },\n  updateUser: userData => {\n    const currentUser = get().user;\n    if (currentUser) {\n      set({\n        user: {\n          ...currentUser,\n          ...userData\n        }\n      });\n      saveState(get());\n    }\n  },\n  setLoading: loading => {\n    set({\n      isLoading: loading\n    });\n  }\n}));","map":{"version":3,"names":["create","loadState","serializedState","localStorage","getItem","JSON","parse","err","saveState","state","stringify","user","token","isAuthenticated","setItem","initialState","useAuthStore","set","get","isLoading","login","newState","logout","updateUser","userData","currentUser","setLoading","loading"],"sources":["D:/miko/frontend/src/stores/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { User } from '../types/user';\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  login: (user: User, token: string) => void;\r\n  logout: () => void;\r\n  updateUser: (user: Partial<User>) => void;\r\n  setLoading: (loading: boolean) => void;\r\n}\r\n\r\n// 从localStorage加载初始状态\r\nconst loadState = (): Partial<AuthState> => {\r\n  try {\r\n    const serializedState = localStorage.getItem('auth-storage');\r\n    if (serializedState === null) {\r\n      return {};\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return {};\r\n  }\r\n};\r\n\r\n// 保存状态到localStorage\r\nconst saveState = (state: AuthState) => {\r\n  try {\r\n    const serializedState = JSON.stringify({\r\n      user: state.user,\r\n      token: state.token,\r\n      isAuthenticated: state.isAuthenticated,\r\n    });\r\n    localStorage.setItem('auth-storage', serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};\r\n\r\nconst initialState = loadState();\r\n\r\nexport const useAuthStore = create<AuthState>((set, get) => ({\r\n  user: initialState.user || null,\r\n  token: initialState.token || null,\r\n  isAuthenticated: initialState.isAuthenticated || false,\r\n  isLoading: false,\r\n  \r\n  login: (user: User, token: string) => {\r\n    const newState = {\r\n      user,\r\n      token,\r\n      isAuthenticated: true,\r\n      isLoading: false,\r\n    };\r\n    set(newState);\r\n    saveState(get());\r\n  },\r\n  \r\n  logout: () => {\r\n    const newState = {\r\n      user: null,\r\n      token: null,\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n    };\r\n    set(newState);\r\n    saveState(get());\r\n  },\r\n  \r\n  updateUser: (userData: Partial<User>) => {\r\n    const currentUser = get().user;\r\n    if (currentUser) {\r\n      set({\r\n        user: { ...currentUser, ...userData },\r\n      });\r\n      saveState(get());\r\n    }\r\n  },\r\n  \r\n  setLoading: (loading: boolean) => {\r\n    set({ isLoading: loading });\r\n  },\r\n}));\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAchC;AACA,MAAMC,SAAS,GAAGA,CAAA,KAA0B;EAC1C,IAAI;IACF,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAC5D,IAAIF,eAAe,KAAK,IAAI,EAAE;MAC5B,OAAO,CAAC,CAAC;IACX;IACA,OAAOG,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC;EACpC,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,OAAO,CAAC,CAAC;EACX;AACF,CAAC;;AAED;AACA,MAAMC,SAAS,GAAIC,KAAgB,IAAK;EACtC,IAAI;IACF,MAAMP,eAAe,GAAGG,IAAI,CAACK,SAAS,CAAC;MACrCC,IAAI,EAAEF,KAAK,CAACE,IAAI;MAChBC,KAAK,EAAEH,KAAK,CAACG,KAAK;MAClBC,eAAe,EAAEJ,KAAK,CAACI;IACzB,CAAC,CAAC;IACFV,YAAY,CAACW,OAAO,CAAC,cAAc,EAAEZ,eAAe,CAAC;EACvD,CAAC,CAAC,MAAM;IACN;EAAA;AAEJ,CAAC;AAED,MAAMa,YAAY,GAAGd,SAAS,CAAC,CAAC;AAEhC,OAAO,MAAMe,YAAY,GAAGhB,MAAM,CAAY,CAACiB,GAAG,EAAEC,GAAG,MAAM;EAC3DP,IAAI,EAAEI,YAAY,CAACJ,IAAI,IAAI,IAAI;EAC/BC,KAAK,EAAEG,YAAY,CAACH,KAAK,IAAI,IAAI;EACjCC,eAAe,EAAEE,YAAY,CAACF,eAAe,IAAI,KAAK;EACtDM,SAAS,EAAE,KAAK;EAEhBC,KAAK,EAAEA,CAACT,IAAU,EAAEC,KAAa,KAAK;IACpC,MAAMS,QAAQ,GAAG;MACfV,IAAI;MACJC,KAAK;MACLC,eAAe,EAAE,IAAI;MACrBM,SAAS,EAAE;IACb,CAAC;IACDF,GAAG,CAACI,QAAQ,CAAC;IACbb,SAAS,CAACU,GAAG,CAAC,CAAC,CAAC;EAClB,CAAC;EAEDI,MAAM,EAAEA,CAAA,KAAM;IACZ,MAAMD,QAAQ,GAAG;MACfV,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE,KAAK;MACtBM,SAAS,EAAE;IACb,CAAC;IACDF,GAAG,CAACI,QAAQ,CAAC;IACbb,SAAS,CAACU,GAAG,CAAC,CAAC,CAAC;EAClB,CAAC;EAEDK,UAAU,EAAGC,QAAuB,IAAK;IACvC,MAAMC,WAAW,GAAGP,GAAG,CAAC,CAAC,CAACP,IAAI;IAC9B,IAAIc,WAAW,EAAE;MACfR,GAAG,CAAC;QACFN,IAAI,EAAE;UAAE,GAAGc,WAAW;UAAE,GAAGD;QAAS;MACtC,CAAC,CAAC;MACFhB,SAAS,CAACU,GAAG,CAAC,CAAC,CAAC;IAClB;EACF,CAAC;EAEDQ,UAAU,EAAGC,OAAgB,IAAK;IAChCV,GAAG,CAAC;MAAEE,SAAS,EAAEQ;IAAQ,CAAC,CAAC;EAC7B;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}