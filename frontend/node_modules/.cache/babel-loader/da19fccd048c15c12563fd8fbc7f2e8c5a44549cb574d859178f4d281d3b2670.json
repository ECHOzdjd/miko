{"ast":null,"code":"import{useMutation,useQuery}from'react-query';import{useAuthStore}from'../stores/authStore';import{authApi}from'../api/auth';// import { LoginRequest, RegisterRequest } from '../types/user';\nimport toast from'react-hot-toast';export const useAuth=()=>{const{login,logout,updateUser}=useAuthStore();// 登录\nconst loginMutation=useMutation({mutationFn:authApi.login,onSuccess:data=>{login(data.user,data.token);toast.success('登录成功！');},onError:error=>{var _error$response,_error$response$data;toast.error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'登录失败');}});// 注册\nconst registerMutation=useMutation({mutationFn:authApi.register,onSuccess:data=>{login(data.user,data.token);toast.success('注册成功！');},onError:error=>{var _error$response2,_error$response3;console.log('Registration error:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);// 处理详细的字段错误信息\nconst errorData=(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data;if(errorData){let errorMessages=[];// 处理密码错误\nif(errorData.password&&Array.isArray(errorData.password)){errorMessages=errorMessages.concat(errorData.password);}// 处理邮箱错误\nif(errorData.email&&Array.isArray(errorData.email)){errorMessages=errorMessages.concat(errorData.email);}// 处理昵称错误\nif(errorData.nickname&&Array.isArray(errorData.nickname)){errorMessages=errorMessages.concat(errorData.nickname);}// 处理确认密码错误\nif(errorData.password_confirm&&Array.isArray(errorData.password_confirm)){errorMessages=errorMessages.concat(errorData.password_confirm);}// 处理非字段错误\nif(errorData.non_field_errors&&Array.isArray(errorData.non_field_errors)){errorMessages=errorMessages.concat(errorData.non_field_errors);}// 显示所有错误信息\nif(errorMessages.length>0){errorMessages.forEach(message=>{toast.error(message);});}else{toast.error(errorData.error||errorData.detail||'注册失败');}}else{toast.error('注册失败，请稍后重试');}}});// 登出\nconst logoutMutation=useMutation({mutationFn:authApi.logout,onSuccess:()=>{logout();toast.success('已退出登录');},onError:()=>{// 即使API调用失败，也要清除本地状态\nlogout();}});// 更新用户信息\nconst updateUserMutation=useMutation({mutationFn:authApi.updateUser,onSuccess:data=>{updateUser(data);toast.success('资料更新成功！');},onError:error=>{var _error$response4,_error$response4$data;toast.error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||'更新失败');}});// 关注用户\nconst followUserMutation=useMutation({mutationFn:authApi.followUser,onSuccess:()=>{toast.success('关注成功！');},onError:error=>{var _error$response5,_error$response5$data;toast.error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||'关注失败');}});// 取消关注用户\nconst unfollowUserMutation=useMutation({mutationFn:authApi.unfollowUser,onSuccess:()=>{toast.success('取消关注成功！');},onError:error=>{var _error$response6,_error$response6$data;toast.error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.error)||'取消关注失败');}});return{login:loginMutation.mutate,register:registerMutation.mutate,logout:logoutMutation.mutate,updateUser:updateUserMutation.mutate,followUser:followUserMutation.mutate,unfollowUser:unfollowUserMutation.mutate,isLoading:loginMutation.isLoading||registerMutation.isLoading};};// 获取当前用户信息的Hook\nexport const useCurrentUser=()=>{const{token,isAuthenticated}=useAuthStore();return useQuery({queryKey:['currentUser'],queryFn:authApi.getCurrentUser,enabled:isAuthenticated&&!!token,staleTime:5*60*1000,// 5分钟\nretry:false});};","map":{"version":3,"names":["useMutation","useQuery","useAuthStore","authApi","toast","useAuth","login","logout","updateUser","loginMutation","mutationFn","onSuccess","data","user","token","success","onError","error","_error$response","_error$response$data","response","registerMutation","register","_error$response2","_error$response3","console","log","errorData","errorMessages","password","Array","isArray","concat","email","nickname","password_confirm","non_field_errors","length","forEach","message","detail","logoutMutation","updateUserMutation","_error$response4","_error$response4$data","followUserMutation","followUser","_error$response5","_error$response5$data","unfollowUserMutation","unfollowUser","_error$response6","_error$response6$data","mutate","isLoading","useCurrentUser","isAuthenticated","queryKey","queryFn","getCurrentUser","enabled","staleTime","retry"],"sources":["D:/miko/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useMutation, useQuery } from 'react-query';\r\nimport { useAuthStore } from '../stores/authStore';\r\nimport { authApi } from '../api/auth';\r\n// import { LoginRequest, RegisterRequest } from '../types/user';\r\nimport toast from 'react-hot-toast';\r\n\r\nexport const useAuth = () => {\r\n  const { login, logout, updateUser } = useAuthStore();\r\n\r\n  // 登录\r\n  const loginMutation = useMutation({\r\n    mutationFn: authApi.login,\r\n    onSuccess: (data) => {\r\n      login(data.user, data.token);\r\n      toast.success('登录成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || '登录失败');\r\n    },\r\n  });\r\n\r\n  // 注册\r\n  const registerMutation = useMutation({\r\n    mutationFn: authApi.register,\r\n    onSuccess: (data) => {\r\n      login(data.user, data.token);\r\n      toast.success('注册成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('Registration error:', error.response?.data);\r\n      \r\n      // 处理详细的字段错误信息\r\n      const errorData = error.response?.data;\r\n      if (errorData) {\r\n        let errorMessages: string[] = [];\r\n        \r\n        // 处理密码错误\r\n        if (errorData.password && Array.isArray(errorData.password)) {\r\n          errorMessages = errorMessages.concat(errorData.password);\r\n        }\r\n        \r\n        // 处理邮箱错误\r\n        if (errorData.email && Array.isArray(errorData.email)) {\r\n          errorMessages = errorMessages.concat(errorData.email);\r\n        }\r\n        \r\n        // 处理昵称错误\r\n        if (errorData.nickname && Array.isArray(errorData.nickname)) {\r\n          errorMessages = errorMessages.concat(errorData.nickname);\r\n        }\r\n        \r\n        // 处理确认密码错误\r\n        if (errorData.password_confirm && Array.isArray(errorData.password_confirm)) {\r\n          errorMessages = errorMessages.concat(errorData.password_confirm);\r\n        }\r\n        \r\n        // 处理非字段错误\r\n        if (errorData.non_field_errors && Array.isArray(errorData.non_field_errors)) {\r\n          errorMessages = errorMessages.concat(errorData.non_field_errors);\r\n        }\r\n        \r\n        // 显示所有错误信息\r\n        if (errorMessages.length > 0) {\r\n          errorMessages.forEach(message => {\r\n            toast.error(message);\r\n          });\r\n        } else {\r\n          toast.error(errorData.error || errorData.detail || '注册失败');\r\n        }\r\n      } else {\r\n        toast.error('注册失败，请稍后重试');\r\n      }\r\n    },\r\n  });\r\n\r\n  // 登出\r\n  const logoutMutation = useMutation({\r\n    mutationFn: authApi.logout,\r\n    onSuccess: () => {\r\n      logout();\r\n      toast.success('已退出登录');\r\n    },\r\n    onError: () => {\r\n      // 即使API调用失败，也要清除本地状态\r\n      logout();\r\n    },\r\n  });\r\n\r\n  // 更新用户信息\r\n  const updateUserMutation = useMutation({\r\n    mutationFn: authApi.updateUser,\r\n    onSuccess: (data) => {\r\n      updateUser(data);\r\n      toast.success('资料更新成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || '更新失败');\r\n    },\r\n  });\r\n\r\n  // 关注用户\r\n  const followUserMutation = useMutation({\r\n    mutationFn: authApi.followUser,\r\n    onSuccess: () => {\r\n      toast.success('关注成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || '关注失败');\r\n    },\r\n  });\r\n\r\n  // 取消关注用户\r\n  const unfollowUserMutation = useMutation({\r\n    mutationFn: authApi.unfollowUser,\r\n    onSuccess: () => {\r\n      toast.success('取消关注成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || '取消关注失败');\r\n    },\r\n  });\r\n\r\n  return {\r\n    login: loginMutation.mutate,\r\n    register: registerMutation.mutate,\r\n    logout: logoutMutation.mutate,\r\n    updateUser: updateUserMutation.mutate,\r\n    followUser: followUserMutation.mutate,\r\n    unfollowUser: unfollowUserMutation.mutate,\r\n    isLoading: loginMutation.isLoading || registerMutation.isLoading,\r\n  };\r\n};\r\n\r\n// 获取当前用户信息的Hook\r\nexport const useCurrentUser = () => {\r\n  const { token, isAuthenticated } = useAuthStore();\r\n\r\n  return useQuery({\r\n    queryKey: ['currentUser'],\r\n    queryFn: authApi.getCurrentUser,\r\n    enabled: isAuthenticated && !!token,\r\n    staleTime: 5 * 60 * 1000, // 5分钟\r\n    retry: false,\r\n  });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}