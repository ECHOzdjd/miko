{"ast":null,"code":"import apiClient from './client';\nexport const postsApi = {\n  // 获取帖子列表\n  getPosts: async (filters = {}) => {\n    const params = new URLSearchParams();\n    if (filters.post_type) params.append('post_type', filters.post_type);\n    if (filters.author_id) params.append('author_id', filters.author_id.toString());\n    if (filters.search) params.append('search', filters.search);\n    if (filters.ordering) params.append('ordering', filters.ordering);\n    const response = await apiClient.get(`/posts/posts/?${params.toString()}`);\n    return response.data;\n  },\n  // 获取帖子详情\n  getPost: async postId => {\n    const response = await apiClient.get(`/posts/posts/${postId}/`);\n    return response.data;\n  },\n  // 创建帖子\n  createPost: async data => {\n    const formData = new FormData();\n    formData.append('title', data.title);\n    formData.append('content', data.content);\n    formData.append('post_type', data.post_type);\n    formData.append('tags', JSON.stringify(data.tags));\n    data.images.forEach((image, index) => {\n      formData.append(`images`, image);\n    });\n    const response = await apiClient.post('/posts/posts/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // 更新帖子\n  updatePost: async (postId, data) => {\n    const response = await apiClient.patch(`/posts/posts/${postId}/`, data);\n    return response.data;\n  },\n  // 删除帖子\n  deletePost: async postId => {\n    await apiClient.delete(`/posts/posts/${postId}/`);\n  },\n  // 点赞帖子\n  likePost: async postId => {\n    await apiClient.post(`/posts/posts/${postId}/like/`);\n  },\n  // 取消点赞帖子\n  unlikePost: async postId => {\n    await apiClient.delete(`/posts/posts/${postId}/like/`);\n  },\n  // 收藏帖子\n  bookmarkPost: async postId => {\n    await apiClient.post(`/posts/posts/${postId}/bookmark/`);\n  },\n  // 取消收藏帖子\n  unbookmarkPost: async postId => {\n    await apiClient.delete(`/posts/posts/${postId}/bookmark/`);\n  },\n  // 分享帖子\n  sharePost: async (postId, platform) => {\n    await apiClient.post(`/posts/posts/${postId}/share/`, {\n      platform\n    });\n  },\n  // 举报帖子\n  reportPost: async (postId, reportType, reason) => {\n    await apiClient.post(`/posts/posts/${postId}/report/`, {\n      report_type: reportType,\n      reason\n    });\n  },\n  // 获取热门帖子\n  getTrendingPosts: async () => {\n    const response = await apiClient.get('/posts/posts/trending/');\n    return response.data;\n  },\n  // 获取推荐帖子\n  getRecommendedPosts: async () => {\n    const response = await apiClient.get('/posts/posts/recommended/');\n    return response.data;\n  }\n};","map":{"version":3,"names":["apiClient","postsApi","getPosts","filters","params","URLSearchParams","post_type","append","author_id","toString","search","ordering","response","get","data","getPost","postId","createPost","formData","FormData","title","content","JSON","stringify","tags","images","forEach","image","index","post","headers","updatePost","patch","deletePost","delete","likePost","unlikePost","bookmarkPost","unbookmarkPost","sharePost","platform","reportPost","reportType","reason","report_type","getTrendingPosts","getRecommendedPosts"],"sources":["D:/miko/frontend/src/api/posts.ts"],"sourcesContent":["import apiClient from './client';\r\nimport { Post, CreatePostRequest, PostFilters } from '../types/post';\r\n\r\nexport const postsApi = {\r\n  // 获取帖子列表\r\n  getPosts: async (filters: PostFilters = {}): Promise<{ results: Post[]; count: number; next: string | null }> => {\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.post_type) params.append('post_type', filters.post_type);\r\n    if (filters.author_id) params.append('author_id', filters.author_id.toString());\r\n    if (filters.search) params.append('search', filters.search);\r\n    if (filters.ordering) params.append('ordering', filters.ordering);\r\n    \r\n    const response = await apiClient.get(`/posts/posts/?${params.toString()}`);\r\n    return response.data;\r\n  },\r\n\r\n  // 获取帖子详情\r\n  getPost: async (postId: number): Promise<Post> => {\r\n    const response = await apiClient.get(`/posts/posts/${postId}/`);\r\n    return response.data;\r\n  },\r\n\r\n  // 创建帖子\r\n  createPost: async (data: CreatePostRequest): Promise<Post> => {\r\n    const formData = new FormData();\r\n    formData.append('title', data.title);\r\n    formData.append('content', data.content);\r\n    formData.append('post_type', data.post_type);\r\n    formData.append('tags', JSON.stringify(data.tags));\r\n    \r\n    data.images.forEach((image, index) => {\r\n      formData.append(`images`, image);\r\n    });\r\n    \r\n    const response = await apiClient.post('/posts/posts/', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // 更新帖子\r\n  updatePost: async (postId: number, data: Partial<CreatePostRequest>): Promise<Post> => {\r\n    const response = await apiClient.patch(`/posts/posts/${postId}/`, data);\r\n    return response.data;\r\n  },\r\n\r\n  // 删除帖子\r\n  deletePost: async (postId: number): Promise<void> => {\r\n    await apiClient.delete(`/posts/posts/${postId}/`);\r\n  },\r\n\r\n  // 点赞帖子\r\n  likePost: async (postId: number): Promise<void> => {\r\n    await apiClient.post(`/posts/posts/${postId}/like/`);\r\n  },\r\n\r\n  // 取消点赞帖子\r\n  unlikePost: async (postId: number): Promise<void> => {\r\n    await apiClient.delete(`/posts/posts/${postId}/like/`);\r\n  },\r\n\r\n  // 收藏帖子\r\n  bookmarkPost: async (postId: number): Promise<void> => {\r\n    await apiClient.post(`/posts/posts/${postId}/bookmark/`);\r\n  },\r\n\r\n  // 取消收藏帖子\r\n  unbookmarkPost: async (postId: number): Promise<void> => {\r\n    await apiClient.delete(`/posts/posts/${postId}/bookmark/`);\r\n  },\r\n\r\n  // 分享帖子\r\n  sharePost: async (postId: number, platform: string): Promise<void> => {\r\n    await apiClient.post(`/posts/posts/${postId}/share/`, { platform });\r\n  },\r\n\r\n  // 举报帖子\r\n  reportPost: async (postId: number, reportType: string, reason: string): Promise<void> => {\r\n    await apiClient.post(`/posts/posts/${postId}/report/`, {\r\n      report_type: reportType,\r\n      reason,\r\n    });\r\n  },\r\n\r\n  // 获取热门帖子\r\n  getTrendingPosts: async (): Promise<Post[]> => {\r\n    const response = await apiClient.get('/posts/posts/trending/');\r\n    return response.data;\r\n  },\r\n\r\n  // 获取推荐帖子\r\n  getRecommendedPosts: async (): Promise<Post[]> => {\r\n    const response = await apiClient.get('/posts/posts/recommended/');\r\n    return response.data;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}