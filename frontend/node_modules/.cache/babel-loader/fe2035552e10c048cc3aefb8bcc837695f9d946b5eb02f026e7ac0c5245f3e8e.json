{"ast":null,"code":"import apiClient from'./client';export const authApi={// 用户注册\nregister:async data=>{const response=await apiClient.post('/users/register/',data);return response.data;},// 用户登录\nlogin:async data=>{const response=await apiClient.post('/users/login/',data);return response.data;},// 用户登出\nlogout:async()=>{await apiClient.post('/users/logout/');},// 获取当前用户信息\ngetCurrentUser:async()=>{const response=await apiClient.get('/users/me/');return response.data;},// 更新用户信息\nupdateUser:async data=>{const response=await apiClient.patch('/users/me/',data);return response.data;},// 获取用户详情\ngetUser:async userId=>{const response=await apiClient.get(\"/users/\".concat(userId,\"/\"));return response.data;},// 关注用户\nfollowUser:async userId=>{await apiClient.post('/users/follows/follow/',{user_id:userId});},// 取消关注用户\nunfollowUser:async userId=>{await apiClient.post('/users/follows/unfollow/',{user_id:userId});},// 获取用户粉丝列表\ngetUserFollowers:async function(userId){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;const response=await apiClient.get(\"/users/\".concat(userId,\"/followers/?page=\").concat(page));return response.data;},// 获取用户关注列表\ngetUserFollowing:async function(userId){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;const response=await apiClient.get(\"/users/\".concat(userId,\"/following/?page=\").concat(page));return response.data;}};","map":{"version":3,"names":["apiClient","authApi","register","data","response","post","login","logout","getCurrentUser","get","updateUser","patch","getUser","userId","concat","followUser","user_id","unfollowUser","getUserFollowers","page","arguments","length","undefined","getUserFollowing"],"sources":["D:/miko/frontend/src/api/auth.ts"],"sourcesContent":["import apiClient from './client';\r\nimport { LoginRequest, RegisterRequest, AuthResponse, User } from '../types/user';\r\n\r\nexport const authApi = {\r\n  // 用户注册\r\n  register: async (data: RegisterRequest): Promise<AuthResponse> => {\r\n    const response = await apiClient.post('/users/register/', data);\r\n    return response.data;\r\n  },\r\n\r\n  // 用户登录\r\n  login: async (data: LoginRequest): Promise<AuthResponse> => {\r\n    const response = await apiClient.post('/users/login/', data);\r\n    return response.data;\r\n  },\r\n\r\n  // 用户登出\r\n  logout: async (): Promise<void> => {\r\n    await apiClient.post('/users/logout/');\r\n  },\r\n\r\n  // 获取当前用户信息\r\n  getCurrentUser: async (): Promise<User> => {\r\n    const response = await apiClient.get('/users/me/');\r\n    return response.data;\r\n  },\r\n\r\n  // 更新用户信息\r\n  updateUser: async (data: Partial<User>): Promise<User> => {\r\n    const response = await apiClient.patch('/users/me/', data);\r\n    return response.data;\r\n  },\r\n\r\n  // 获取用户详情\r\n  getUser: async (userId: number): Promise<User> => {\r\n    const response = await apiClient.get(`/users/${userId}/`);\r\n    return response.data;\r\n  },\r\n\r\n  // 关注用户\r\n  followUser: async (userId: number): Promise<void> => {\r\n    await apiClient.post('/users/follows/follow/', { user_id: userId });\r\n  },\r\n\r\n  // 取消关注用户\r\n  unfollowUser: async (userId: number): Promise<void> => {\r\n    await apiClient.post('/users/follows/unfollow/', { user_id: userId });\r\n  },\r\n\r\n  // 获取用户粉丝列表\r\n  getUserFollowers: async (userId: number, page = 1): Promise<{ results: User[]; count: number }> => {\r\n    const response = await apiClient.get(`/users/${userId}/followers/?page=${page}`);\r\n    return response.data;\r\n  },\r\n\r\n  // 获取用户关注列表\r\n  getUserFollowing: async (userId: number, page = 1): Promise<{ results: User[]; count: number }> => {\r\n    const response = await apiClient.get(`/users/${userId}/following/?page=${page}`);\r\n    return response.data;\r\n  },\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,SAAS,KAAM,UAAU,CAGhC,MAAO,MAAM,CAAAC,OAAO,CAAG,CACrB;AACAC,QAAQ,CAAE,KAAO,CAAAC,IAAqB,EAA4B,CAChE,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,SAAS,CAACK,IAAI,CAAC,kBAAkB,CAAEF,IAAI,CAAC,CAC/D,MAAO,CAAAC,QAAQ,CAACD,IAAI,CACtB,CAAC,CAED;AACAG,KAAK,CAAE,KAAO,CAAAH,IAAkB,EAA4B,CAC1D,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,SAAS,CAACK,IAAI,CAAC,eAAe,CAAEF,IAAI,CAAC,CAC5D,MAAO,CAAAC,QAAQ,CAACD,IAAI,CACtB,CAAC,CAED;AACAI,MAAM,CAAE,KAAAA,CAAA,GAA2B,CACjC,KAAM,CAAAP,SAAS,CAACK,IAAI,CAAC,gBAAgB,CAAC,CACxC,CAAC,CAED;AACAG,cAAc,CAAE,KAAAA,CAAA,GAA2B,CACzC,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAJ,SAAS,CAACS,GAAG,CAAC,YAAY,CAAC,CAClD,MAAO,CAAAL,QAAQ,CAACD,IAAI,CACtB,CAAC,CAED;AACAO,UAAU,CAAE,KAAO,CAAAP,IAAmB,EAAoB,CACxD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,SAAS,CAACW,KAAK,CAAC,YAAY,CAAER,IAAI,CAAC,CAC1D,MAAO,CAAAC,QAAQ,CAACD,IAAI,CACtB,CAAC,CAED;AACAS,OAAO,CAAE,KAAO,CAAAC,MAAc,EAAoB,CAChD,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAJ,SAAS,CAACS,GAAG,WAAAK,MAAA,CAAWD,MAAM,KAAG,CAAC,CACzD,MAAO,CAAAT,QAAQ,CAACD,IAAI,CACtB,CAAC,CAED;AACAY,UAAU,CAAE,KAAO,CAAAF,MAAc,EAAoB,CACnD,KAAM,CAAAb,SAAS,CAACK,IAAI,CAAC,wBAAwB,CAAE,CAAEW,OAAO,CAAEH,MAAO,CAAC,CAAC,CACrE,CAAC,CAED;AACAI,YAAY,CAAE,KAAO,CAAAJ,MAAc,EAAoB,CACrD,KAAM,CAAAb,SAAS,CAACK,IAAI,CAAC,0BAA0B,CAAE,CAAEW,OAAO,CAAEH,MAAO,CAAC,CAAC,CACvE,CAAC,CAED;AACAK,gBAAgB,CAAE,cAAAA,CAAOL,MAAc,CAA4D,IAA1D,CAAAM,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAC/C,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAJ,SAAS,CAACS,GAAG,WAAAK,MAAA,CAAWD,MAAM,sBAAAC,MAAA,CAAoBK,IAAI,CAAE,CAAC,CAChF,MAAO,CAAAf,QAAQ,CAACD,IAAI,CACtB,CAAC,CAED;AACAoB,gBAAgB,CAAE,cAAAA,CAAOV,MAAc,CAA4D,IAA1D,CAAAM,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAC/C,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAJ,SAAS,CAACS,GAAG,WAAAK,MAAA,CAAWD,MAAM,sBAAAC,MAAA,CAAoBK,IAAI,CAAE,CAAC,CAChF,MAAO,CAAAf,QAAQ,CAACD,IAAI,CACtB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}