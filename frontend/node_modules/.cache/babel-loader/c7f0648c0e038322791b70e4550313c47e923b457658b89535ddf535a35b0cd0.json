{"ast":null,"code":"import{useMutation,useQuery}from'react-query';import{useAuthStore}from'../stores/authStore';import{authApi}from'../api/auth';import toast from'react-hot-toast';export const useAuth=()=>{const{login,logout,updateUser}=useAuthStore();// 登录\nconst loginMutation=useMutation({mutationFn:authApi.login,onSuccess:data=>{login(data.user,data.token);toast.success('登录成功！');},onError:error=>{var _error$response,_error$response$data;toast.error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'登录失败');}});// 注册\nconst registerMutation=useMutation({mutationFn:authApi.register,onSuccess:data=>{login(data.user,data.token);toast.success('注册成功！');},onError:error=>{var _error$response2,_error$response2$data;toast.error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'注册失败');}});// 登出\nconst logoutMutation=useMutation({mutationFn:authApi.logout,onSuccess:()=>{logout();toast.success('已退出登录');},onError:()=>{// 即使API调用失败，也要清除本地状态\nlogout();}});// 更新用户信息\nconst updateUserMutation=useMutation({mutationFn:authApi.updateUser,onSuccess:data=>{updateUser(data);toast.success('资料更新成功！');},onError:error=>{var _error$response3,_error$response3$data;toast.error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'更新失败');}});// 关注用户\nconst followUserMutation=useMutation({mutationFn:authApi.followUser,onSuccess:()=>{toast.success('关注成功！');},onError:error=>{var _error$response4,_error$response4$data;toast.error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||'关注失败');}});// 取消关注用户\nconst unfollowUserMutation=useMutation({mutationFn:authApi.unfollowUser,onSuccess:()=>{toast.success('取消关注成功！');},onError:error=>{var _error$response5,_error$response5$data;toast.error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||'取消关注失败');}});return{login:loginMutation.mutate,register:registerMutation.mutate,logout:logoutMutation.mutate,updateUser:updateUserMutation.mutate,followUser:followUserMutation.mutate,unfollowUser:unfollowUserMutation.mutate,isLoading:loginMutation.isLoading||registerMutation.isLoading};};// 获取当前用户信息的Hook\nexport const useCurrentUser=()=>{const{user,token,isAuthenticated}=useAuthStore();return useQuery({queryKey:['currentUser'],queryFn:authApi.getCurrentUser,enabled:isAuthenticated&&!!token,staleTime:5*60*1000,// 5分钟\nretry:false});};","map":{"version":3,"names":["useMutation","useQuery","useAuthStore","authApi","toast","useAuth","login","logout","updateUser","loginMutation","mutationFn","onSuccess","data","user","token","success","onError","error","_error$response","_error$response$data","response","registerMutation","register","_error$response2","_error$response2$data","logoutMutation","updateUserMutation","_error$response3","_error$response3$data","followUserMutation","followUser","_error$response4","_error$response4$data","unfollowUserMutation","unfollowUser","_error$response5","_error$response5$data","mutate","isLoading","useCurrentUser","isAuthenticated","queryKey","queryFn","getCurrentUser","enabled","staleTime","retry"],"sources":["D:/miko/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useMutation, useQuery } from 'react-query';\r\nimport { useAuthStore } from '../stores/authStore';\r\nimport { authApi } from '../api/auth';\r\nimport { LoginRequest, RegisterRequest } from '../types/user';\r\nimport toast from 'react-hot-toast';\r\n\r\nexport const useAuth = () => {\r\n  const { login, logout, updateUser } = useAuthStore();\r\n\r\n  // 登录\r\n  const loginMutation = useMutation({\r\n    mutationFn: authApi.login,\r\n    onSuccess: (data) => {\r\n      login(data.user, data.token);\r\n      toast.success('登录成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || '登录失败');\r\n    },\r\n  });\r\n\r\n  // 注册\r\n  const registerMutation = useMutation({\r\n    mutationFn: authApi.register,\r\n    onSuccess: (data) => {\r\n      login(data.user, data.token);\r\n      toast.success('注册成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || '注册失败');\r\n    },\r\n  });\r\n\r\n  // 登出\r\n  const logoutMutation = useMutation({\r\n    mutationFn: authApi.logout,\r\n    onSuccess: () => {\r\n      logout();\r\n      toast.success('已退出登录');\r\n    },\r\n    onError: () => {\r\n      // 即使API调用失败，也要清除本地状态\r\n      logout();\r\n    },\r\n  });\r\n\r\n  // 更新用户信息\r\n  const updateUserMutation = useMutation({\r\n    mutationFn: authApi.updateUser,\r\n    onSuccess: (data) => {\r\n      updateUser(data);\r\n      toast.success('资料更新成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || '更新失败');\r\n    },\r\n  });\r\n\r\n  // 关注用户\r\n  const followUserMutation = useMutation({\r\n    mutationFn: authApi.followUser,\r\n    onSuccess: () => {\r\n      toast.success('关注成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || '关注失败');\r\n    },\r\n  });\r\n\r\n  // 取消关注用户\r\n  const unfollowUserMutation = useMutation({\r\n    mutationFn: authApi.unfollowUser,\r\n    onSuccess: () => {\r\n      toast.success('取消关注成功！');\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || '取消关注失败');\r\n    },\r\n  });\r\n\r\n  return {\r\n    login: loginMutation.mutate,\r\n    register: registerMutation.mutate,\r\n    logout: logoutMutation.mutate,\r\n    updateUser: updateUserMutation.mutate,\r\n    followUser: followUserMutation.mutate,\r\n    unfollowUser: unfollowUserMutation.mutate,\r\n    isLoading: loginMutation.isLoading || registerMutation.isLoading,\r\n  };\r\n};\r\n\r\n// 获取当前用户信息的Hook\r\nexport const useCurrentUser = () => {\r\n  const { user, token, isAuthenticated } = useAuthStore();\r\n\r\n  return useQuery({\r\n    queryKey: ['currentUser'],\r\n    queryFn: authApi.getCurrentUser,\r\n    enabled: isAuthenticated && !!token,\r\n    staleTime: 5 * 60 * 1000, // 5分钟\r\n    retry: false,\r\n  });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}