{"ast":null,"code":"import axios from 'axios';\nimport { useAuthStore } from '../stores/authStore';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://miko-backend-cl3w.onrender.com/api';\nconst MEDIA_BASE_URL = process.env.REACT_APP_MEDIA_URL || 'https://miko-backend-cl3w.onrender.com';\n\n// 创建axios实例\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napiClient.interceptors.request.use(config => {\n  const token = useAuthStore.getState().token;\n  if (token) {\n    config.headers.Authorization = `Token ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token过期或无效，清除认证状态\n    useAuthStore.getState().logout();\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","useAuthStore","API_BASE_URL","process","env","REACT_APP_API_URL","MEDIA_BASE_URL","REACT_APP_MEDIA_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","getState","Authorization","error","Promise","reject","response","_error$response","status","logout","window","location","href"],"sources":["D:/miko/frontend/src/api/client.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { useAuthStore } from '../stores/authStore';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://miko-backend-cl3w.onrender.com/api';\r\nconst MEDIA_BASE_URL = process.env.REACT_APP_MEDIA_URL || 'https://miko-backend-cl3w.onrender.com';\r\n\r\n// 创建axios实例\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = useAuthStore.getState().token;\r\n    if (token) {\r\n      config.headers.Authorization = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token过期或无效，清除认证状态\r\n      useAuthStore.getState().logout();\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default apiClient;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,qBAAqB;AAElD,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,4CAA4C;AAClG,MAAMC,cAAc,GAAGH,OAAO,CAACC,GAAG,CAACG,mBAAmB,IAAI,wCAAwC;;AAElG;AACA,MAAMC,SAAS,GAAGR,KAAK,CAACS,MAAM,CAAC;EAC7BC,OAAO,EAAER,YAAY;EACrBS,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGhB,YAAY,CAACiB,QAAQ,CAAC,CAAC,CAACD,KAAK;EAC3C,IAAIA,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACO,aAAa,GAAG,SAASF,KAAK,EAAE;EACjD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,SAAS,CAACK,YAAY,CAACU,QAAQ,CAACR,GAAG,CAChCQ,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAxB,YAAY,CAACiB,QAAQ,CAAC,CAAC,CAACQ,MAAM,CAAC,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}