{"ast":null,"code":"import apiClient from './client';\nexport const messagesApi = {\n  // 获取对话列表\n  getConversations: async () => {\n    const response = await apiClient.get('/messages/conversations/');\n    return response.data;\n  },\n  // 获取对话详情\n  getConversation: async conversationId => {\n    const response = await apiClient.get(`/messages/conversations/${conversationId}/`);\n    return response.data;\n  },\n  // 获取对话中的消息\n  getMessages: async conversationId => {\n    const response = await apiClient.get(`/messages/conversations/${conversationId}/messages/`);\n    return response.data;\n  },\n  // 发送消息\n  sendMessage: async (conversationId, content) => {\n    const response = await apiClient.post(`/messages/conversations/${conversationId}/messages/`, {\n      content\n    });\n    return response.data;\n  },\n  // 开始对话\n  startConversation: async data => {\n    const response = await apiClient.post('/messages/start-conversation/', data);\n    return response.data;\n  },\n  // 标记消息为已读\n  markMessagesRead: async conversationId => {\n    await apiClient.post(`/messages/conversations/${conversationId}/mark-read/`);\n  }\n};","map":{"version":3,"names":["apiClient","messagesApi","getConversations","response","get","data","getConversation","conversationId","getMessages","sendMessage","content","post","startConversation","markMessagesRead"],"sources":["D:/miko/frontend/src/api/messages.ts"],"sourcesContent":["import apiClient from './client';\r\n\r\nexport interface Conversation {\r\n  id: number;\r\n  participants: Array<{\r\n    id: number;\r\n    nickname: string;\r\n    avatar_url: string;\r\n  }>;\r\n  last_message?: {\r\n    id: number;\r\n    sender: {\r\n      id: number;\r\n      nickname: string;\r\n      avatar_url: string;\r\n    };\r\n    content: string;\r\n    is_read: boolean;\r\n    created_at: string;\r\n  };\r\n  other_participant?: {\r\n    id: number;\r\n    nickname: string;\r\n    avatar_url: string;\r\n  };\r\n  unread_count: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface Message {\r\n  id: number;\r\n  sender: {\r\n    id: number;\r\n    nickname: string;\r\n    avatar_url: string;\r\n  };\r\n  content: string;\r\n  is_read: boolean;\r\n  created_at: string;\r\n}\r\n\r\nexport interface StartConversationRequest {\r\n  user_id: number;\r\n}\r\n\r\nexport const messagesApi = {\r\n  // 获取对话列表\r\n  getConversations: async (): Promise<{ results: Conversation[]; count: number }> => {\r\n    const response = await apiClient.get('/messages/conversations/');\r\n    return response.data;\r\n  },\r\n\r\n  // 获取对话详情\r\n  getConversation: async (conversationId: number): Promise<Conversation> => {\r\n    const response = await apiClient.get(`/messages/conversations/${conversationId}/`);\r\n    return response.data;\r\n  },\r\n\r\n  // 获取对话中的消息\r\n  getMessages: async (conversationId: number): Promise<{ results: Message[]; count: number }> => {\r\n    const response = await apiClient.get(`/messages/conversations/${conversationId}/messages/`);\r\n    return response.data;\r\n  },\r\n\r\n  // 发送消息\r\n  sendMessage: async (conversationId: number, content: string): Promise<Message> => {\r\n    const response = await apiClient.post(`/messages/conversations/${conversationId}/messages/`, {\r\n      content,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // 开始对话\r\n  startConversation: async (data: StartConversationRequest): Promise<Conversation> => {\r\n    const response = await apiClient.post('/messages/start-conversation/', data);\r\n    return response.data;\r\n  },\r\n\r\n  // 标记消息为已读\r\n  markMessagesRead: async (conversationId: number): Promise<void> => {\r\n    await apiClient.post(`/messages/conversations/${conversationId}/mark-read/`);\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AA8ChC,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,gBAAgB,EAAE,MAAAA,CAAA,KAAiE;IACjF,MAAMC,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAC,0BAA0B,CAAC;IAChE,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,eAAe,EAAE,MAAOC,cAAsB,IAA4B;IACxE,MAAMJ,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAC,2BAA2BG,cAAc,GAAG,CAAC;IAClF,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAG,WAAW,EAAE,MAAOD,cAAsB,IAAqD;IAC7F,MAAMJ,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAC,2BAA2BG,cAAc,YAAY,CAAC;IAC3F,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAI,WAAW,EAAE,MAAAA,CAAOF,cAAsB,EAAEG,OAAe,KAAuB;IAChF,MAAMP,QAAQ,GAAG,MAAMH,SAAS,CAACW,IAAI,CAAC,2BAA2BJ,cAAc,YAAY,EAAE;MAC3FG;IACF,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAO,iBAAiB,EAAE,MAAOP,IAA8B,IAA4B;IAClF,MAAMF,QAAQ,GAAG,MAAMH,SAAS,CAACW,IAAI,CAAC,+BAA+B,EAAEN,IAAI,CAAC;IAC5E,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAQ,gBAAgB,EAAE,MAAON,cAAsB,IAAoB;IACjE,MAAMP,SAAS,CAACW,IAAI,CAAC,2BAA2BJ,cAAc,aAAa,CAAC;EAC9E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}