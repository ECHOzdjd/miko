{"ast":null,"code":"import axios from'axios';import{useAuthStore}from'../stores/authStore';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000/api';// 创建axios实例\nconst apiClient=axios.create({baseURL:API_BASE_URL,timeout:10000,headers:{'Content-Type':'application/json'}});// 请求拦截器\napiClient.interceptors.request.use(config=>{const token=useAuthStore.getState().token;if(token){config.headers.Authorization=\"Token \".concat(token);}return config;},error=>{return Promise.reject(error);});// 响应拦截器\napiClient.interceptors.response.use(response=>{return response;},error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Token过期或无效，清除认证状态\nuseAuthStore.getState().logout();window.location.href='/login';}return Promise.reject(error);});export default apiClient;","map":{"version":3,"names":["axios","useAuthStore","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","getState","Authorization","concat","error","Promise","reject","response","_error$response","status","logout","window","location","href"],"sources":["D:/miko/frontend/src/api/client.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { useAuthStore } from '../stores/authStore';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\n// 创建axios实例\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = useAuthStore.getState().token;\r\n    if (token) {\r\n      config.headers.Authorization = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token过期或无效，清除认证状态\r\n      useAuthStore.getState().logout();\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default apiClient;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,YAAY,KAAQ,qBAAqB,CAElD,KAAM,CAAAC,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2BAA2B,CAEjF;AACA,KAAM,CAAAC,SAAS,CAAGN,KAAK,CAACO,MAAM,CAAC,CAC7BC,OAAO,CAAEN,YAAY,CACrBO,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,EAAK,CACV,KAAM,CAAAC,KAAK,CAAGd,YAAY,CAACe,QAAQ,CAAC,CAAC,CAACD,KAAK,CAC3C,GAAIA,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAACO,aAAa,UAAAC,MAAA,CAAYH,KAAK,CAAE,CACjD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAK,KAAK,EAAK,CACT,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACAb,SAAS,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,EAAK,CACZ,MAAO,CAAAA,QAAQ,CACjB,CAAC,CACAH,KAAK,EAAK,KAAAI,eAAA,CACT,GAAI,EAAAA,eAAA,CAAAJ,KAAK,CAACG,QAAQ,UAAAC,eAAA,iBAAdA,eAAA,CAAgBC,MAAM,IAAK,GAAG,CAAE,CAClC;AACAvB,YAAY,CAACe,QAAQ,CAAC,CAAC,CAACS,MAAM,CAAC,CAAC,CAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CACA,MAAO,CAAAR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAAb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}